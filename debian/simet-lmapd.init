#!/lib/init/init-d-script
# simet-lmapd.init - Debian sysv-rc initscript for simet-lmapd
# Copyright (c) 2019 NIC.br
#
# Distributed under the GPLv3+ license with additional terms and permissions
# Refer to the COPYING file on the program source for details
#
### BEGIN INIT INFO
# Required-Start:    $local_fs $remote_fs $time simet-ma
# Required-Stop:     $local_fs $remote_fs $time simet-ma
# Provides:          simet-lmapd
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: SIMET-MA LMAP scheduler
# Description:       SIMET Management Agent LMAP task scheduler
### END INIT INFO

DAEMON=/opt/simet/bin/lmapd
COMMAND_NAME=lmapd
NAME="lmapd"
DESC="SIMET Measurement Agent LMAP scheduler"
USER=nicbr-simet
GROUP=$USER

PID_DIR=/var/run/lmapd
PIDFILE="${PID_DIR}/lmapd.pid"

LMAPCTL="/opt/simet/bin/lmapctl -j"

START_ARGS="-u $USER -c $USER --background"
STOP_ARGS="-u $USER"
DAEMON_ARGS="-j"

# not called on default init-d-script do_restart/reload
do_start_prepare() {
	[ -r /opt/simet/lib/simet/simet-ma.conf ] && . /opt/simet/lib/simet/simet-ma.conf
	[ -r /opt/simet/etc/simet/simet-ma.conf ] && . /opt/simet/etc/simet/simet-ma.conf
	LMAP_QUEUE_DIR="${LMAP_QUEUE_DIR:-/var/spool/lmapd/queue}"
	LMAP_SCHEDULE_FILE="${LMAP_SCHEDULE_FILE:-/var/run/lmapd/lmap-schedule.json}"
	LMAP_AGENT_FILE="${LMAP_AGENT_FILE:-/opt/simet/etc/simet/lmap/agent-id.json}"

	LMAP_SCHEDULE_DIR=$(dirname "$LMAP_SCHEDULE_FILE")

	mkdir -p "$PID_DIR"
	chgrp $GROUP "$PID_DIR" && chmod 02770 "$PID_DIR"
	mkdir -p "$LMAP_SCHEDULE_DIR"
	chgrp $GROUP "$LMAP_SCHEDULE_DIR" && chmod 02770 "$LMAP_SCHEDULE_DIR"
	mkdir -p "$LMAP_QUEUE_DIR"
	chmod 0700 "$LMAP_QUEUE_DIR" && chown -R $USER:$GROUP "$LMAP_QUEUE_DIR" && chmod 02770 "$LMAP_QUEUE_DIR"

	# might race a schedule download, we don't want to clobber the
	# downloaded schedule with a ln -sf.
	[ -r "$LMAP_SCHEDULE_FILE" ] || \
		ln -s /opt/simet/lib/simet/lmap-default-schedule.json \
			"$LMAP_SCHEDULE_FILE" 2>/dev/null || true

	# don't mess with not-files, like symlinks. chown must run before chmod.
	(cd "$LMAP_SCHEDULE_DIR" && find . -type f -name "*.json" -exec chown $USER:$GROUP '{}' +)
	(cd "$LMAP_SCHEDULE_DIR" && find . -type f -name "*.json" -exec chmod g+r '{}' +)

	start-stop-daemon -c "$USER" --start --name simet_reg_ma --startas /opt/simet/bin/simet_register_ma.sh -- --boot || true
	[ -r "$LMAP_AGENT_FILE" ] || {
		log_warning_msg "LMAP agent-id is not configured yet"
		exit 0
	}

	# contact controller at daemon start/boot, we will use the default schedule
	# if this fails
	start-stop-daemon -c "$USER" --start --name simetgetsched --startas /opt/simet/bin/simet_lmap-fetch-schedule.sh -- --boot || true

	# try to geolocate (as root)
	/opt/simet/bin/simet_geolocation.sh >/dev/null 2>&1 &
	:
}

# start-stop-daemon --exec requires CAP_SYS_ADMIN, no good inside a container

# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start_cmd_override() {
	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name $NAME --test > /dev/null \
	  || return 1
	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name $NAME -- $DAEMON_ARGS \
	  || return 2
}

do_reload() {
	log_action_begin_msg "Validating $DESC configuration"
	if $LMAPCTL validate >/dev/null 2>&1 ; then
		log_action_end_msg 0
		log_daemon_msg "Reloading $DESC configuration files" "$NAME"
		RETVAL=0
		$LMAPCTL reload || RETVAL=$?
		log_end_msg $RETVAL
	else
		log_action_end_msg 1 "not reloading"
		RETVAL=1
	fi
	return $RETVAL
}

do_stop_cmd_override() {
	$LMAPCTL shutdown || return $?
}

do_status_override() {
	if $LMAPCTL running >/dev/null ; then
		log_success_msg "$NAME is running"
		return 0
	else
		log_failure_msg "$NAME is not running"
		return 3
	fi
}

