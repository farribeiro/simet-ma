#shellcheck shell=ash
################################################################################
# Tasks
# - Verificação do AgentToken
# - ServerList
# - MeasureToken
# - TWAMP
# - Geolocation
# - Report LMAP
#
# Execution (after build):
# ./dist/simet_agent_unix.sh --config ./dist/simet_agent_unix.conf --debug
#
# Dependencies:
# - listed by each sub-script
# - none for main.sh
################################################################################

_info "Executing $0"

main(){
  local _config="undefined"
  local _result="undefined"

  # read params
  while [ ! $# -eq 0 ]; do
    case "$1" in
      --config)
        _config="$2"
        ;;
      --debug)
        DEBUG="true"
        ;;
    esac
    shift
  done

  _main_config "$_config"
  _main_setup
  # _main_orchestrate
  _main_cleanup
}


_main_orchestrate(){ 
  # 1. task authentication
  AGENT_ID="undefined"
  AGENT_TOKEN="undefined"
  authentication
  _debug "Authentication: AGENT_ID=$AGENT_ID AGENT_TOKEN=$AGENT_TOKEN"

  # 2. task service discovery
  local _discovered="false"
  discover_init
  while [ $( discover_next_peer ) -eq 0 ]; do
    local _host=$( discover_service AUTHORIZATION HOST )
    local _port=$( discover_service AUTHORIZATION PORT )
    local _path=$( discover_service AUTHORIZATION PATH )
    local _endpoint_base="https://$_host:$_port/$_path"
    _info "Discovered measurement peer. Authorization attempt at $_host"
    # 3. task authorization: try at successive peers, until first success 
    AUTHORIZATION_TOKEN="undefined"
    authorization "$_endpoint_base" "$AGENT_TOKEN"
    if [ $? -eq 0 ]; then
      _discovered="true"
      break
    fi
  done
  if [ "$_discovered" = "true" ]; then
    _info "Peer discovery and authorization success: Selected peer: $_host"
  else
    _error "Peer discovery and authorization failure: Last attempt at peer: $_host"
    exit 1
  fi

  # 4. task twamp
  if [[ "$TWAMPC" = "NO" || "$TWAMPC" = "no" || "$TWAMPC" = "No" ]]; then
    _info "Skipping task TWAMP"
  else
    _info "Starting task TWAMP"
    local _host=$( discover_service TWAMP HOST )
    local _port=$( discover_service TWAMP PORT ) 
    eval "$TWAMPC -4 -p $_port $_host > $RESULTDIR/twamp-v4.json"
    eval "$TWAMPC -6 -p $_port $_host > $RESULTDIR/twamp-v6.json"
    _debug "Task TWAMP concluded"
  fi

  # 5. task geolocation


  # 6. task report
  local _host=$( discover_service REPORT HOST )
  local _port=$( discover_service REPORT PORT ) 
  local _path=$( discover_service REPORT PATH ) 
  local _endpoint_base="https://$_host:$_port/$_path"
  report \
    --template "$REPORT_TEMPLATE" \
    --agent "$AGENT_ID" \
    --tabledir "$RESULTDIR" \
    --endpoint "$_endpoint_base" \
    --jwt "$AGENT_TOKEN"
  if [[ $? -ne 0 ]]; then
    _log "Report failed."
    return 1
  fi
  _log "LMAP Report Success." 
}

_main_setup(){
  BASEDIR="undefined"
  RESULTDIR="undefined"

  # collect files generated by a single execution
  BASEDIR=/tmp/simet-ma/$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  mkdir -p "$BASEDIR"
  _debug "Files will be colected in $BASEDIR"

  # Example of the report directory
  # $BASEDIR/report/tasks/twamp-v1/tables/t1.json
  RESULTDIR="$BASEDIR/report/tasks"
  mkdir -p "$RESULTDIR"
}

_main_cleanup(){
  # delete files of this execution
  if [ "$DEBUG" != "true" ]; then
    rm -fr $BASEDIR
  fi
}

_main_config(){
  source "$1"
  _debug "Loaded config '$1': AGENT_ID_FILE=$AGENT_ID_FILE AGENT_TOKEN_FILE=$AGENT_TOKEN_FILE API_SERVICE_DISCOVERY=$API_SERVICE_DISCOVERY AGETN_LOCK=$AGENT_LOCK TWAMPC=$TWAMPC"
  local _msg=""
  if [ "$AGENT_ID_FILE" = "" ]; then _msg="$_msg AGENT_ID_FILE"; fi
  if [ "$AGENT_TOKEN_FILE" = "" ]; then _msg="$_msg AGENT_TOKEN_FILE"; fi
  if [ "$API_SERVICE_DISCOVERY" = "" ]; then _msg="$_msg API_SERVICE_DISCOVERY"; fi
  if [ "$AGENT_LOCK" = "" ]; then _msg="$_msg AGENT_LOCK"; fi
  if [ "$TWAMPC" = "" ]; then _msg="$_msg TWAMPC"; fi
  if [ "$_msg" != "" ]; then
    _error "Exit due to missing config params: $_msg"
    exit 1
  fi
}

# always execute entry point
main "$@"

# keep line
