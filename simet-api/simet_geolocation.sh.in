#!/bin/bash
## simet_geolocation.sh - simet geolocation helper
## Copyright 2012-2019 NIC.br
##
## Attemps to enable and passive scan all wireless interfaces for BSSids.
## Filters out any BSSIDs that _only_ have hidden or *_nomap SSIDs,
## calls a SIMET API to get an location service's API key, and calls the
## (3rd party) Location Services API to do the geolocation.  Caches the
## result, to avoid constant use of the location services API.
##
## The collected BSSID data is sent to the 3rd party location service
## provider, as that is the input data for the geolocation database.
##
## Parameters:
##   --fail-silently     : return empty result and status 0 on server denial
##   --from-cache        : return only data from cache (do not geolocate)
##                         fails if there is no cached data or cache is too old
##   --max-age <seconds> : maximum age of cached data, 0 for no-cache
##
## simet_geolocation.sh API level: 2

set -e
set -o pipefail

OUTFILE=
abend() {
  [ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
  echo "$0: error: $*" >&2
  exit "$RC"
}
soft_abend() {
  [ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
  [ -n "$FAIL_SILENTLY" ] && exit 0
  echo "$0: error: $*" >&2
  exit "$RC"
}
log() {
  echo "$0: $*" >&2
  :
}

. @SIMETLIBDIR@/simet_lib.sh

[ -z "$GEOLOC_CACHE" ] && abend "GEOLOC_CACHE missing from conf file"
OUTFILE=
FAIL_SILENTLY=
CACHE_ONLY=
MAX_AGE=259200
RC=1

AGENT_ID_FILE=${AGENT_ID_FILE:-@SIMETCONFDIR@/agent-id}
AGENT_TOKEN_FILE=${AGENT_TOKEN_FILE:-@SIMETCONFDIR@/agent.jwt}
JSONFILTER=${JSONFILTER:-jsonfilter}
API_SIMET_GEO=${API_SIMET_GEO:-https://api.simet.nic.br/geolocation}

# We *require* an agent-id and agent token to get an API key
OLDAT=
OLDAID=
[ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
[ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")
if [ -z "$OLDAT" ] || [ -z "$OLDAID" ] ; then
  RC=20 abend "MA not registered yet, cannot geolocate"
fi

# Handle command line
while [ $# -gt 0 ] ; do
  case "$1" in
    --fail-silently)
      FAIL_SILENTLY=1
      ;;
    --from-cache)
      CACHE_ONLY=1
      ;;
    --max-age)
      shift
      MAX_AGE="$1"
      ;;
    *)
      RC=2 abend "Unknown command line argument/option $1"
      ;;
  esac
  shift
done

USERAGENT=$(get_http_useragent)
CURLOPT="$CURL_APIOPT --max-filesize 10000"

simet_get_geoloc_provider() {
  LSK=$(curl $CURLOPT -A "$USERAGENT" \
       -X GET -f -H "Authorization: Bearer $OLDAT" \
       "${API_SIMET_GEO}/v1/geolocation_providers?agent_id=$OLDAID;type=googlelocationservice_v1") \
     || RC=22 abend "could not fetch geolocation credentials"
  [ -z "$LSK" ] && exit 0
  LS_TYPE=$($JSONFILTER -s "$LSK" -e '@.type') || RC=23 abend "could not process geolocation credentials"
  [ "$LS_TYPE" != "googlelocationservice_v1" ] && RC=26 soft_abend "permission to geolocate denied by server"
  LS_URI=$($JSONFILTER -s "$LSK" -e '@.uri') || RC=23 abend "could not process location services URI"
  [ -z "$LS_URI" ] && RC=26 soft_abend "geolocation slot denied by server"
  LS_NAME=$($JSONFILTER -s "$LSK" -e '@.name') || LS_NAME="GeolocationProviderUnknown"
  :
}

##
## Low-level "wifi" BSS scanning routines
## requires: iw, iproute2
##

WNETDEV_PREFIX="tmp.geo"

##
# iw-scan a netdev, filter out BSS that only have hidden/weird and _nomap SSIDs
# note that "iw" is crappy enough to output errors to stdout instead of stderr
_iw_scan() {
  iw dev "$1" scan ap-force passive | awk -- \
    'BEGIN { bss="" };
    /^BSS[[:blank:]]/ { gsub("[^a-fA-F0-9:-]*","",$2) ; bss=$2 };
    /[[:blank:]]*SSID:[[:blank:]]+[^[:blank:]]/ && !/_nomap$/ && !/\\x00/ { if (bss != "") { print bss ; bss="" } }' \
  | tr -s ' \t' '\n' | tr -d -c '0-9a-fA-F:\n' || return $?
  :
}

##
# iwphy_scan() - enable radios and scan for BSSes
#
# returns 0 when valid results (empty is also valid)
# results on stdout
iwphy_scan() {
  command -v ip >/dev/null 2>&1 || abend "ip command (from iproute2) not available!"
  # no iw: same as no radios or no BSSes to be found
  command -v iw >/dev/null 2>&1 || return 0
  # attempt to bring up every radio for scanning, using a station vfs
  WPHYS=$(iw phy | awk '/Wiphy[[:blank:]]/ {print $2}') 2>/dev/null || return 1
  [ -z "$WPHYS" ] && return 0
  MYWPHYS=
  for i in $WPHYS ; do 
    if { iw phy "$i" interface add "$WNETDEV_PREFIX.$i" type station && \
         ip link set dev "$WNETDEV_PREFIX.$i" up ; } >/dev/null 2>&1 ; then
       MYWPHYS="$MYWPHYS $WNETDEV_PREFIX.$i"
     else
       iw dev "$WNETDEV_PREFIX.$i" del >/dev/null 2>&1 || true
     fi
  done
  # all radios should have an "lower-up" wnetdev of some sort at this point;
  # scan all of them serially just in case: we did not attempt to weed out virtual
  # interfaces of the same radio.  Since we used station mode, ACS and DFS/CAC
  # time slots are skipped on lower-up.  We still wait a bit just in case
  sleep 5
  WDEVS=$(iw dev | sed -n -e '/nterface/ {s/.*nterface[[:blank:]]\+// p}')
  for i in $WDEVS ; do
    # _iw_scan can output errors to stdout, filter those out
    SCAN=$(_iw_scan "$i") 2>/dev/null && echo "$SCAN"
  done
  # take down all radios we brought up
  for i in $MYWPHYS ; do iw dev "$i" del >/dev/null 2>&1 || true ; done
  :
}

##
## output formatting
##

##
# $LS_NAME - metric field for geolocationprovider
# $1 - timestamp: seconds since 1970-01-01T00:00:00Z
# $2 - latitude: degrees (float), positive=north
# $3 - longitude: degrees (float), positive=east
# $4 - accuracy: meters
#
# The timestamp is converted to NTP epoch (1900-01-01T00:00:00Z)
# in a simple, straightforward way.
#
# FIXME: add noise if accuracy is better than 150m
simet_output_geoloc_metric() {
  # This is likely not y2038k-safe due to 32-bit shell math
  GEO_NTIME=$(($1 + 2208988800))
  echo "{\"function\":[{\"uri\":\"urn:ietf:metrics:perf:Priv_SPMonitor_Passive_IEEE80211-BSSID-IPaddress-${LS_NAME}-MaxAccuracyM150__Multiple_Singleton\"}],\"column\":[\"timestamp\",\"latitude\",\"longitude\",\"accuracy\"],\"row\":["
  echo "{\"value\":[\"$GEO_NTIME\",\"$2\",\"$3\",\"$4\"]}"
  echo "]}"
}

##
## cache control
##

##
# persist_geoloc_RAM() - store to temporary tmpfs cache file
#
persist_geoloc_RAM() {
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] ; then
    abend "internal error on persist_geoloc_RAM()"
  fi
  rm -f "${GEOLOC_CACHE}"
  ( echo "$1" ; echo "$2" "$3" "$4" ) > "${GEOLOC_CACHE}"
  :
}

_read_cache() {
  [ -r "${GEOLOC_CACHE}" ] || return 1;
  GEO_UTIME=$(sed -n -e '1 { p ; q }' "${GEOLOC_CACHE}") || return 1
  [ -z "$GEO_UTIME" ] && return 1
  # Shell could be limited to 32bits, not y2038-safe, but we don't have bc/dc :(
  time_delta=$(( $(date +%s -u) - GEO_UTIME )) || return 1
  [ $MAX_AGE -ge $time_delta ] || return 1
  GEO_LAT=$(sed -n -e '2 {s/ .*// ; p ; q}' "${GEOLOC_CACHE}")
  [ -z "$GEO_LAT" ] && return 1
  GEO_LNG=$(sed -n -e '2 {s/^ *[^ ]\+ *// ; s/ *[^ ]\+ *$// ; p ; q}' "${GEOLOC_CACHE}")
  [ -z "$GEO_LNG" ] && return 1
  GEO_ACC=$(sed -n -e '2 {s/^ *[^ ]\+ \+[^ ]\+ *// ; p ; q}' "${GEOLOC_CACHE}")
  [ -z "$GEO_ACC" ] && return 1
  :
}

##
# simet_read_geo_cache() - reads data from cache if valid
#
# invalidates cache if corrupted or too old
# returns status 0 and valid data on GEO_UTIME/LAT/LNG/ACC
#         status NZ if cache invalid/old/empty
simet_read_geo_cache() {
  _read_cache && return 0
  [ -r "$GEOLOC_CACHE" ] && {
    log "invalidating geolocation cache"
    rm -f "$GEOLOC_CACHE"
  }
  return 1
}

##
##  GMLS/MLS API handling
##

##
# gmls_generate_post_body() - body for GMLS/MLS API call
# $@ : BSSIDs
#
# https://developers.google.com/maps/documentation/geolocation/intro
#
# Output: <stdout> - POST body for API call
#         $?       - 0 ok, or errno for error
gmls_generate_post_body() {
cat <<EOFGOPB
{ "considerIp": "true", "wifiAccessPoints": [
EOFGOPB
while [ $# != 0 ] ; do
  mac=$1
  shift

  if [ $# != 0 ] ; then
    echo "{ \"macAddress\": \"$mac\" },"
  else
    echo "{ \"macAddress\": \"$mac\" }"
  fi
done
cat <<EOF2GOPB
] }
EOF2GOPB
}

##
# gmls_api_call - geolocates
# $LS_URI : URI for the API call (with key)
# <stdin> : API body
#
# Returns:
# <stdout> : API result
gmls_api_call() {
  curl $CURLOPT -f -d @- -H "Content-type: application/json" -i "$LS_URI" ||
    RC=24 soft_abend "could not contact location services API"
  :
}

##
# gmls_prelaunch() - avoid API call that would fail, and get API key
# $@ : BSSIDs
gmls_prelaunch() {
  [ $# -le 2 ] && RC=1 soft_abend "Not enough BSSIDs found to geolocate"
  simet_get_geoloc_provider || RC=26 soft_abend "Geolocation request denied by SIMET API"
  :
}

_geolocate() {
  BSSIDS=$(iwphy_scan | sort -u | tr -s ' \t\n' ' ') || return 1
  # do not "$BSSIDS".
  gmls_prelaunch $BSSIDS || return 1
  gmls_generate_post_body $BSSIDS | gmls_api_call | \
    awk -- \
      'BEGIN { FS=":|," ; accuracy=0 ; code=200 ; n=0 }
      /"code"/     { code=$2 }
      /"accuracy"/ { accuracy=$2 }
      /"lat"/      { lat=$2 ; n++ }
      /"lng"/	 { lng=$2 ; n++ }
      END { if (n == 2 && code == 200) print lat "\n" lng "\n" accuracy "\n" }' || return 1
  :
}

geolocate() {
  GEO_UTIME=$( date -u +%s ) || abend "failed to read system date"
  geo=$(_geolocate) || return 1
  GEO_LAT=$(echo "$geo" | sed -E -n -e '1 { s/^[[:blank:]]+// ; s/[[:blank:]]+$// ; p ; q }')
  [ -z "$GEO_LAT" ] && return 1
  GEO_LNG=$(echo "$geo" | sed -E -n -e '2 { s/^[[:blank:]]+// ; s/[[:blank:]]+$// ; p ; q }')
  [ -z "$GEO_LNG" ] && return 1
  GEO_ACC=$(echo "$geo" | sed -E -n -e '3 { s/^[[:blank:]]+// ; s/[[:blank:]]+$// ; p ; q }')
  [ -z "$GEO_ACC" ] && return 1
  :
}

##
## MAIN
##

simet_read_geo_cache || {
  [ -n "$CACHE_ONLY" ] && RC=1 soft_abend "No valid geolocation cached data found"
  geolocate || exit 1
}
simet_output_geoloc_metric "$GEO_UTIME" "$GEO_LAT" "$GEO_LNG" "$GEO_ACC"
persist_geoloc_RAM "$GEO_UTIME" "$GEO_LAT" "$GEO_LNG" "$GEO_ACC"

exit 0

TMPGEO=$(mktemp -t simetgeoloc.$$.XXXXXX) && TMPGEOD=$(mktemp -t simetgeoloc_d.$$.XXXXXX)

if [ -z "$TMPGEO" ] || [ -z "$TMPGEOD" ] ; then
	[ -n "$TMPGEO" ] && rm -f "$TMPGEO"
	[ -n "$TMPGEOD" ] && rm -f "$TMPGEOD"
	exit 3
fi

generate_simetws_device  $saida_geoloc > "$TMPGEOD"
envia_geolocation_d=$(simet_ws -p "https://$cf_host/$cf_simet_web_persistence_optional/geolocation-device" -f "$TMPGEOD")

if [ -n "$hash_measure" ] ; then
	generate_simetws_measure $saida_geoloc > "$TMPGEO"
	envia_geolocation=$(simet_ws -p "https://$cf_host/$cf_simet_web_persistence/geolocation" -f "$TMPGEO")
else
	envia_geolocation="(skipped, hash_measure was not specificed)"
fi

rm -f "$TMPGEO"
rm -f "$TMPGEOD"

echo "SIMET geoapi: measurement location result: $envia_geolocation" >&2
echo "SIMET geoapi: device location result: $envia_geolocation_d" >&2

exit 0
