#!/bin/bash

# Spoofer-like test using nping and traceroute
# Copyright (c) 2019 NIC.br <medicoes@simet.nic.br>

# Requires simet-nping, either suid root or cap_net_raw+ep
# Requires traceroute
# Requires "ip route get"

set -e
set -o pipefail

OUTDIR=
abend() {
  [ -n "$OUTDIR" ] && [ -d "$OUTDIR" ] && rm -fr "$OUTDIR" 2>/dev/null
  simet_log simet-ma daemon.err "simet-spoofer: error: $*"
  exit "$RC"
}
soft_abend() {
  [ -n "$OUTDIR" ] && [ -d "$OUTDIR" ] && rm -fr "$OUTDIR" 2>/dev/null
  [ -n "$FAIL_SILENTLY" ] && exit 0
  simet_log simet-ma daemon.err "simet-spoofer: error: $*"
  exit "$RC"
}

. @SIMETLIBDIR@/simet_lib.sh

command -v simet-nping >/dev/null || RC=3 abend "simet-nping not found on PATH"
command -v traceroute >/dev/null || RC=3 abend "traceroute not found on PATH"

FAIL_SILENTLY=
RC=1

#FIXME
KEY="simet982411 testtest"

TARGETXOR=1
TARGETS=()
TFDIST=10

usage() {
  echo "$0 [--help][-h] [--fail-silently] [--key <key>] [--tracefilter-same-source] [--tracefilter-distance <distance>] <target>..." >&2
  exit 0
}

#
# Handle command line
#
[ $# -eq 0 ] && usage
while [ $# -gt 0 ] ; do
  case "$1" in
    --help|-h)
      usage
      ;;
    --fail-silently)
      FAIL_SILENTLY=1
      ;;
    --key)
      shift
      KEY="$1"
      ;;
    --tracefilter-same-source)
      TARGETXOR=0
      ;;
    --tracefilter-distance)
      shift
      TFDIST="$1"
      [ "$TFDIST" -gt 0 ] || RC=2 abend "--tracefilter distance must be a number higher than zero"
      ;;
    --*)
      RC=2 abend "Unknown command line option $1"
      ;;
    *)
      TARGETS+=("$1")
      ;;
  esac
  shift
done

[ -z "$KEY" ] && RC=2 abend "an access key is required to run this test"

OUTDIR=$(mktemp -q -t -d simet-spoofer.$$.XXXXXXXXXX) \
  || abend "could not create work directory"
[ -d "$OUTDIR" ] || RC=3 abend "weirdness while creating work directory"

output_json() {
  cat <<- EOFJH1
	{
		"function":[{"uri":"urn:ietf:metrics:perf:TBD"}],
		"column":["test_id","source","destination","raw_output","exit_status"],
		"row":[
EOFJH1
  sed -e '$ s/},$/}]}/' "$OUTDIR"/*.json || abend "failed to render json output"
}

start_test() {
  TESTID="$1"
  shift
  echo "TEST: $TESTID: $*" >&2
}
start_subtest() {
  local OUTFILE

  SUBTESTID="$1"
  SUBTESTNUM="$2"
  shift 2 || RC=3 abend "missing tags in subtest"
  echo "SUBTEST: $SUBTESTID $SUBTESTNUM: $*" >&2
  OUTFILE=$(mktemp -q -t -p "$OUTDIR" simet-spoofer."$TESTID"."$SUBTESTID"."$SUBTESTNUM".XXXXXXXXXX) \
    || abend "could not create temporary output file $OUTFILE"
  echo "$OUTFILE"
}
end_subtest() {
  local OUTFILE R

  SUBTESTID="$1"
  SUBTESTNUM="$2"
  shift 2 || RC=3 abend "missing tags in subtest"
  SUBTEST1="$1"
  SUBTEST2="$2"
  OUTFILE="$3"
  R="$4"
  [ "$R" -ge 0 ] || RC=3 abend "not a valid return status"
  [ -r "$OUTFILE" ] || RC=3 abend "no tool output file to process"
  {
    echo "{\"value\":[\"$TESTID\",\"$SUBTEST1\",\"$SUBTEST2\","
    sed -e 's/[\]/\\\\/g' -e 's/"/\\"/g' -e 's/\t/\\t/g' -e 's/$/\\n/' \
        -e '1 s/^/"/' -e '$ s/$/",/' -e 's/[[:cntrl:]]*//g' "$OUTFILE" | tr -d '\n\r'
    echo "\"$R\"]},"
  } > "$OUTFILE.json" || abend "failed to write json subtest output"
  rm "$OUTFILE" || true
  echo "ENDSUBTEST: $SUBTESTID $SUBTESTNUM" >&2
}
end_test() {
  echo "ENDTEST: $TESTID" >&2
}

fail_all() {
  echo "TESTFAIL: $TESTID" >&2
  RC=11 soft_abend "could not perform spoofer measurement"
}


straceroute() (
  exec traceroute -n -N1 -w1 -q3 -m30 "$@"
)

snping() (
  exec simet-nping --echo-client "$KEY" --udp "$@"
)

xor_lsb() {
  # Invert the least significant bit of an IPv4 or IPv6 address
  # IPv6 regex can be quite loose because ':' is forbidden in hostnames
  sed -E -e 's/^[[:blank:]]+// ; s/[[:blank:]]\+$//' \
      -e '/^((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])$|^[0-9a-fA-F:]*:[0-9a-fA-F:.]+$/ {
             h;s/.$//;x;
             s/(.*)(.)$/\2/;y/0123456789abcdefABCDEF/1032547698badcfeBADCFE/;H;
             x;s/\n//
          }'
}

# Returns selection of sources for spoofing
# $1 - destination
get_spoofed_sources() {
  echo 192.168.34.99
  echo 10.233.211.199
  echo 172.31.23.11
  echo 200.160.2.3
  echo "$i"
  echo "$i" | xor_lsb
}

probe_targets() {
  local ONESUCCESS OUTFILE N i

  ONESUCCESS=
  start_test "probe_targets_$1" "send non-spoofed packets"
  N=0
  for i in "${TARGETS[@]}" ; do
    N=$((N+1))
    OUTFILE=$(start_subtest probe_targets $N "send to $i")
    R=0
    snping -c5 "$i" >"$OUTFILE" && ONESUCCESS=1 || R=$?
    end_subtest probe_targets $N "" "$i" "$OUTFILE" "$R"
  done
  [ -z "$ONESUCCESS" ] && fail_all
  end_test
}

spoof_targets() {
  local OUTFILE N i

  start_test spoof_packets "send spoofed packets"
  N=0
  for i in "${TARGETS[@]}" ; do for j in $(get_spoofed_sources "$i") ; do
    N=$((N+1))
    (
      OUTFILE=$(start_subtest spoof_packets $N "send spoofed from $j to $i")
      R=0
      snping -c5 -S "$j" "$i" >"$OUTFILE" || R=$?
      end_subtest spoof_packets $N "$j" "$i" "$OUTFILE" "$R"
    )& sleep 1
  done ; done
  wait
  end_test
}

tracefilter_targets() {
  local OUTFILE N sip dip dist i

  start_test tracefilter "modified nping-based tracefilter to targets"
  dist="$1"
  [ -z "$dist" ] && dist=10
  N=0
  for sip in "${TARGETS[@]}" ; do
    dip="$sip"
    [ $TARGETXOR -ne 0 ] && dip=$(echo "$sip" | xor_lsb)

    for i in 1 2 3 ; do
      N=$((N+1))
      (
        OUTFILE=$(start_subtest tracefilter $N "nping traceroute from $sip to $dip, dist=$dist")
        R=0
        snping -c$dist -tr -S "$sip" "$dip" >"$OUTFILE" || R=$?
        end_subtest tracefilter $N "$sip" "$dip" "$OUTFILE" "$R"
      )& sleep 1
    done
  done
  wait
  end_test
}

traceroute_targets() {
  local OUTFILE N i

  start_test "traceroute_$1" "standard traceroute to targets"
  N=0
  for i in "${TARGETS[@]}" ; do
    N=$((N+1))
    (
      OUTFILE=$(start_subtest traceroute $N "target $i")
      R=0
      straceroute "$i" >"$OUTFILE" || R=$?
      end_subtest traceroute $N "" "$i" "$OUTFILE" "$R"
    )& sleep 1
  done
  wait
  end_test
}


probe_targets before
traceroute_targets before
spoof_targets
tracefilter_targets "$TFDIST"
traceroute_targets after
probe_targets after

output_json

[ -n "$OUTDIR" ] && [ -d "$OUTDIR" ] && rm -fr "$OUTDIR" 2>/dev/null
:
