#!/bin/sh
#
# This is an example of vendor/get_platform_simet_secret, usually installed
# either at /opt/simet/lib/simet/vendor or /usr/lib/simet/vendor.
#
# Returns a device-unique secret seed, that can be used by the SIMET system to
# generate the device's pairing secret ("Etiqueta SIMET"), as well as other
# system-unique identifiers or secrets.
#
# While this example is an executable script, this could be any executable
# (e.g. a compiled C program, or an executable Lua script).
#
# It should be present when the device can *permanently* store and retrieve
# from FLASH an 128-bit or bigger integer (or a string), which will not be
# removed or changed by a firmware update (including in rescue mode), and which
# will also survive user-initiated factory resets.
#
# If the device has no such capability (e.g. standard OpenWRT does not have
# this capability), this executable SHOULD NOT BE PRESENT in the device, or it
# must return exit status 1.
#
# This script should return in stdout the exact contents of the information
# requested, as a string, in hexadecimal, using the "0123456789abcdef"
# characters, ONLY.  In that case, it must return exit status 0.
#
# If the requested information cannot be retrieved *at this time* (i.e. it is a
# temporary error), and the system should retry sometime later, it must return
# an exit status other than 0 or 1.  Any functionality that depends on the
# requested information will be unavailable until the attempt is retried and
# succeeds.
#
# NOTES:
#
# * Error messages must be sent to stderr, never to stdout.
# * It is fine to ignore the "resource requested" parameter and always
#   return the same secret: it is just a hint of what the resource will be
#   used for, in case it is needed in the future.
#
#
# Command line: get_platform_simet_secret <resource requested>
#
# resources: vlabel   -   nonce to generate the SIMET pairing secret

RC=3
abend() {
  printf '%s: error: %s\n' "$0" "$*" >&2
  exit $RC
}

# example on how to get an initial device-specific secret
openwrt_read_invariant_seed() {
  # Use unknown sources of variance in FLASH, plus some random
  # data *if* the system actually has accumulated any, which we
  # don't know for sure. If we did, there wouldn't be a reason to
  # read the FLASH in the first place.

  P=$( sed -En -e '/^mtd[0-9]/! d' -e 's#(mtd[^:]+).*#/dev/\1ro# ; p' < /proc/mtd ) ||
    RC=3 abend "failed to locate FLASH partitions"
  SBXSEED=$( set -o pipefail ; \
    { \
      dd if=/dev/urandom bs=16 count=1 ; echo "NIC VLABEL IV 0132457869" ; \
      cat -- $P ; \
      echo "NIC VLABEL TRAILER 091234" ; dd if=/dev/urandom bs=16 count=1 ; \
    } 2>/dev/null | sha256sum - ) || \
      RC=3 abend "failed to generate secret seed"
  [ -z "$SBXSEED" ] && RC=3 abend "sha256sum empty?!"
  # FIXME: compress to base64, less waste
  printf '%s' "$SBXSEED" | tr -dc 0-9a-zA-Z
  :
}

# $1: empty or resource to store
# return 0 if ok
# return 1 on permanent error / not implemented
# return 2 on non-permanent error
simet_vnd_store_nonce_to_flash() {
  SEED=$(openwrt_read_invariant_seed) || return $?
  # add a call to store $SEED to flash here, return 0 if successfull
  return 1
}

# $1: empty or resource to retrieve
# return 0 if ok, nonce on stdout
# return 1 on permanent error / not implemented
# return 2 on secret-not-present-yet
simet_vnd_read_nonce_from_flash() {
  # add a call to retrive $SEED from flash here, return 2 if not found
  # printf '%s' "$SEED" && return 0
  return 2
}

# code here that:
#
# 1. retrieves the secret from FLASH if it exists and outputs to stdout, e.g.
# using printf "%x".
#
# 2. if it doesn't exist yet, creates it using some random data *and*
# device-specific information such as MACs, stores in FLASH, and does (1)
# above.   If anything in this sequence fails, returns 2 (temporary error).
#
# 3. Returns exit status 1 if it can't store data in FLASH that will survive
# firmware updates and factory resets.

RC=0
NONCE=$(simet_vnd_read_nonce_from_flash "$1") || RC=$?
[ "$RC" -eq 2 ] && {
	# try to create
	RC=0
	simet_vnd_store_nonce_to_flash "$1" > /dev/null || RC=$?
	[ $RC -ne 0 ] && exit $RC
	# re-read
	NONCE=$(simet_vnd_read_nonce_from_flash "$1") || RC=$?
}
[ $RC -eq 0 ] && printf '%s' "$NONCE"
exit $RC
