#!/bin/sh
# Refreshes SIMETBOX SIMET MA agent-id and auth token
# Copyright (c) 2018,2019 NIC.br <medicoes@simet.nic.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  In every case, additional
# restrictions and permissions apply, refer to the COPYING file in the
# program Source for details.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License and the COPYING file in the program Source
# for details.

set -e
set -o pipefail

RC=1
OUTFILE=
abend() {
	simet_log simet-ma auth.err "error: $*"
	[ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
	exit "$RC"
}
clean_exit() {
	[ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
	exit 0
}

. @SIMETLIBDIR@/simet_lib.sh

# FIXME: We can and should remove this after the "point of no return"
# of support for downgrading without MA measurement continuity loss.
V1_AGENT_ID_FILE="@SIMETCONFDIR@/agent-id"
V1_AGENT_TOKEN_FILE="@SIMETCONFDIR@/agent.jwt"

SIMETMA_RECONFIG=${SIMETMA_RECONFIG:-/etc/init.d/simet-ma reload}

USERAGENT=$(get_http_useragent)
CURLOPT="$CURL_APIOPT --max-filesize 4000"

simet_refresh_agent_status() {
	APIRES=$( curl $CURLOPT -A "$USERAGENT" -H "X-SIMETBOX-ID: $BOXID" \
		-H "Authorization: Bearer $OLDAT" \
		-X GET -f -o "$OUTFILE" -w "%{http_code}" \
		"${API_SIMET_AGENT_REG}/v2/agents/$OLDAID" ) || return 1
	case "$APIRES" in
	204)
		#FIXME heal this, if it perdures for a while
		abend "server doesn't know about us, need a registration reset!"
		;;
	403|401)
		#FIXME heal this, if it perdures for a while
		abend "registration too old, need a registration reset!"
		;;
	200)
		return 0
		;;
	304)
		clean_exit
		;;
	500|400)
		abend "SIMET2 agent registry service unavailable"
		;;
        esac
	return 1
}

__simet_create_agent_apicall() {
	cat <<- EOFSCAG | \
	  curl $CURLOPT --retry 30 --retry-max-time 300 \
		-A "$USERAGENT" -H "X-SIMETBOX-ID: $BOXID" \
		-H "Content-type: application/json" \
		-f -X POST -o "$OUTFILE" -d @- -w "%{http_code}" \
		"$API_SIMET_AGENT_REG/v2/agents" \
	  || return 1
	{ $*
	  "engine_name":"@SIMET_ENGINE_NAME@",
	  "engine_version":"@PACKAGEVERSION@",
	  "agent_family":"$SIMET2_AGENT_FAMILY",
	  "waiting_for_pairing":false }
	EOFSCAG
	:
}
simet_create_agent() {
	V1AID=
	V1AT=
	V1JSON=
	[ -r "$V1_AGENT_ID_FILE" ] && V1AID=$(cat "$V1_AGENT_ID_FILE")
	[ -r "$V1_AGENT_TOKEN_FILE" ] && V1AT=$(cat "$V1_AGENT_TOKEN_FILE")
	[ -n "$V1AID" ] && [ -n "$V1AT" ] && V1JSON="\"agent_id\":\"$V1AID\",\"agent_token\":\"$V1AT\","

	# FIXME add healing strategy
	APIRES=$(__simet_create_agent_apicall "$V1JSON") || return 1
	[ "$APIRES" -eq 201 ] || return 1
	:
}

gethash() {
	# $1 - file to hash
	[ -r "$1" ] || {
		echo ""
		return 0
	}
	sha256sum "$1" | sed -n '1 { s/[[:blank:]].*// ; p }'
	return 0
}

write_lmap_agent() {
	if [ -z "$1" ] ; then
		rm -f  "$LMAP_AGENT_FILE"
		simet_log simet-ma daemon.notice "SIMET: removed LMAP agent-id"
	else
		cat <<- LMAPAGENTEOF >"$OUTFILE" || return 1
			{"ietf-lmap-control:lmap":{"agent":{"agent-id":"$1","report-agent-id":true}}}
		LMAPAGENTEOF
		HASHOLD=$(gethash "$LMAP_AGENT_FILE") || HASHOLD=
		HASHNEW=$(gethash "$OUTFILE") || return 1
		[ x"$HASHOLD" != x"$HASHNEW" ] && mv -f "$OUTFILE" "$LMAP_AGENT_FILE" && chmod +r "$LMAP_AGENT_FILE"
	fi
	:
}

gettoken() {
	OLDAT=
	OLDAID=
	[ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
	[ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")

	OUTFILE=$(mktemp -q -t simet-at-register.$$.XXXXXXXXXX) || abend "failed to create tmpfile"

	if [ -z "$OLDAT" ] || [ -z "$OLDAID" ] ; then
		simet_create_agent || abend "could not register measurement agent"
	else
		simet_refresh_agent_status || abend "could not update registration"
	fi

	PAIRED=0
	SID=$($JSONFILTER -i "$OUTFILE" -e "AID=@.agent_id" -e "AT=@.agent_token" -e "PAIRED=@.has_pairing") \
		|| abend "illegal response from agent-registry service"
	eval "$SID" || abend "internal error"

	[ x"$AID" != x"$OLDAID" ] && echo "$AID" > "$AGENT_ID_FILE"
	[ x"$AT"  != x"$OLDAT"  ] && echo "$AT" > "$AGENT_TOKEN_FILE"

	write_lmap_agent "$AID"

	rm -f "$OUTFILE"
	OUTFILE=

	if [ ! -r "$AGENT_ID_FILE" ] || [ -z "$AID" ] || [ ! -r "$AGENT_TOKEN_FILE" ] || [ -z "$AT" ] ; then
		abend "failed to register, please retry later"
	fi

	# pairing
	if [ "$PAIRED" != "true" ] && [ "$PAIRED" != 1 ] ; then
		@BINDIR@/simet_register_vlabel.sh || true
	else
		simet_log simet-ma daemon.notice "SIMET: this MA is paired to a participant in the SIMET2 web portal"
	fi

	if [ x"$AID" != x"$OLDAID" ] || [ x"$AT"  != x"$OLDAT"  ] ; then
		simet_log simet-ma auth.notice "SIMET: agent-id or authorization token has changed"
		$SIMETMA_RECONFIG || true
	fi

	simet_log simet-ma auth.info "SIMET: LMAP measurement agent id: $AID"
	:
}

AGENT_LOCK_DIR=$(dirname "$AGENT_TOKEN_LOCK")
[ -d "$AGENT_LOCK_DIR" ] || mkdir -p -m 0755 -- "$AGENT_LOCK_DIR"
( flock -n -x 9 && gettoken ) <&- 9>> "$AGENT_TOKEN_LOCK"
