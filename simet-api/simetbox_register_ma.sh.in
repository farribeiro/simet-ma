#!/bin/sh
# Refreshes SIMETBOX SIMET MA agent-id and auth token
# Copyright (c) 2018,2019 NIC.br <medicoes@simet.nic.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  In every case, additional
# restrictions and permissions apply, refer to the COPYING file in the
# program Source for details.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License and the COPYING file in the program Source
# for details.

OUTFILE=
abend() {
	simet_log simet-ma auth.err "$*"
	[ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
	exit 1
}

. @SIMETLIBDIR@/simet_lib.sh

AGENT_ID_FILE=${AGENT_ID_FILE:-@SIMETCONFDIR@/agent-id}
AGENT_TOKEN_FILE=${AGENT_TOKEN_FILE:-@SIMETCONFDIR@/agent.jwt}
AGENT_TOKEN_LOCK=${AGENT_TOKEN_LOCK:-@LOCALSTATEDIR@/lock/simet-agent-token.lock}
API_AGENT_TOKEN=${API_AGENT_TOKEN:-https://api.simet.nic.br/measurement/jwt}

LMAP_AGENT_FILE=${LMAP_AGENT_FILE:-@SIMETCONFDIR@/lmap/agent-id.json}
SIMETMA_RECONFIG=${SIMETMA_RECONFIG:-/etc/init.d/simet-ma reload}
JSONFILTER=${JSONFILTER:-jsonfilter}

USERAGENT=$(get_http_useragent)
CURLOPT="$CURL_APIOPT --max-filesize 4000"

apicall() {
	until curl $CURLOPT -A "$USERAGENT" -H "X-SIMETBOX-ID: $BOXID" \
		-X POST -f -o "$OUTFILE" \
		-d simetAT="$OLDAT" -d "deviceInfo=$USERAGENT" \
		"$API_AGENT_TOKEN" ; do
			sleep 14400
	done
}

gethash() {
	# $1 - file to hash
	[ -r "$1" ] || {
		echo ""
		return 0
	}
	sha256sum "$1" | sed -n '1 { s/[[:blank:]].*// ; p }'
	return 0
}

write_lmap_agent() {
	if [ -z "$1" ] ; then
		rm -f  "$LMAP_AGENT_FILE"
		simet_log simet-ma daemon.notice "SIMET: removed LMAP agent-id"
	else
		cat <<- LMAPAGENTEOF >"$OUTFILE" || return 1
			{"ietf-lmap-control:lmap":{"agent":{"agent-id":"$1","report-agent-id":true}}}
		LMAPAGENTEOF
		HASHOLD=$(gethash "$LMAP_AGENT_FILE") || HASHOLD=
		HASHNEW=$(gethash "$OUTFILE") || return 1
		[ x"$HASHOLD" != x"$HASHNEW" ] && mv -f "$OUTFILE" "$LMAP_AGENT_FILE" && chmod +r "$LMAP_AGENT_FILE"
	fi
	:
}

gettoken() {
	OLDAT=
	OLDAID=
	[ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
	[ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")

	OUTFILE=$(mktemp -q -t simet-at-register.$$.XXXXXXXXXX) || abend "failed to create tmpfile"
	apicall || abend "failed to contact agent-token service"
	SID=$($JSONFILTER -i "$OUTFILE" -e "AID=@.agentId" -e "AT=@.token") || abend "illegal response from agent-token service"
	eval "$SID" || abend "internal error"

	[ x"$AID" != x"$OLDAID" ] && echo "$AID" > "$AGENT_ID_FILE"
	[ x"$AT"  != x"$OLDAT"  ] && echo "$AT" > "$AGENT_TOKEN_FILE"

	write_lmap_agent "$AID"

	rm -f "$OUTFILE"
	OUTFILE=

	if [ ! -r "$AGENT_ID_FILE" ] || [ -z "$AID" ] || [ ! -r "$AGENT_TOKEN_FILE" ] || [ -z "$AT" ] ; then
		abend "failed to register, please retry later"
	fi

	if [ x"$AID" != x"$OLDAID" ] || [ x"$AT"  != x"$OLDAT"  ] ; then
		simet_log simet-ma auth.notice "SIMET: agent-id or authorization token has changed"
		$SIMETMA_RECONFIG || true
	fi

	simet_log simet-ma auth.info "SIMET: LMAP measurement agent id: $AID"
	:
}

AGENT_LOCK_DIR=$(dirname "$AGENT_TOKEN_LOCK")
[ -d "$AGENT_LOCK_DIR" ] || mkdir -p -m 0755 -- "$AGENT_LOCK_DIR"
( flock -n -x 9 && gettoken ) <&- 9>> "$AGENT_TOKEN_LOCK"
