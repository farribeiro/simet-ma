#!/bin/sh
# Downloads the SIMETBOX SIMET MA lmapd schedule
# Copyright (c) 2019 NIC.br <medicoes@simet.nic.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  In every case, additional
# restrictions and permissions apply, refer to the COPYING file in the
# program Source for details.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License and the COPYING file in the program Source
# for details.

# parameters:
#   --boot   (optional) shorten wait times and not restart the service

OUTFILE=
abend() {
	logger -s -t simet-lmapd -p daemon.err "$*"
	[ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
	exit 1
}

[ -r @SIMETLIBDIR@/simet-ma.conf ] && . @SIMETLIBDIR@/simet-ma.conf
[ -r @SIMETCONFDIR@/simet-ma.conf ] && . @SIMETCONFDIR@/simet-ma.conf

AGENT_ID_FILE=${AGENT_ID_FILE:-@SIMETCONFDIR@/agent-id}
AGENT_TOKEN_FILE=${AGENT_TOKEN_FILE:-@SIMETCONFDIR@/agent.jwt}
AGENT_TOKEN_LOCK=${AGENT_TOKEN_LOCK:-@LOCALSTATEDIR@/lock/simet-agent-token.lock}
AGENT_VERSION_FILE=${AGENT_VERSION_FILE:-/opt/simet/lib/simet/agent-version.txt}
JSONFILTER=${JSONFILTER:-jsonfilter}

LMAP_AGENT_FILE=${LMAP_AGENT_FILE:-@SIMETCONFDIR@/lmap/agent-id.json}
LMAP_CHANNEL_URL=${LMAP_CHANNEL_URL:-https://api.simet.nic.br/controller}
LMAP_SCHEDULE_FILE=${LMAP_SCHEDULE_FILE:-@LOCALSTATEDIR@/lmap/lmap-schedule.json}
LMAP_RECONFIG=${LMAP_RECONFIG:=/etc/init.d/simet-lmapd reload}

LMAPD=@BINDIR@/lmapd
LMAPCTL=@BINDIR@/lmapctl

BOXID=$(get_mac_address.sh 2>/dev/null | tr A-F a-f | tr -d ': -') || true
BOXVERSION=$(get_simet_box_version.sh 2>/dev/null) || BOXVERSION="unknown"
[ -r "${AGENT_VERSION_FILE}" ] && AGENTVERSION=$(cat "${AGENT_VERSION_FILE}")
[ -z "$AGENTVERSION" ] && AGENTVERSION="simet-ma/unknown"
if [ -r /etc/openwrt_release ] ; then
	AGENTENV=$( \
		. /etc/openwrt_release
		echo "$DISTRIB_DESCRIPTION $DISTRIB_TARGET $DISTRIB_ARCH" | tr -s ' '
	) || true
fi
[ -z "$AGENTENV" ] && AGENTENV="unknown"
AGENTENV="$AGENTENV; $(uname -srm)" || AGENTENV="$AGENTENV; unknown"
USERAGENT=$(echo "$AGENTVERSION (SIMETBOX/$BOXVERSION; $AGENTENV)" | tr -dc ' A-Za-z0-9(),.;:/+~^_-')

CURLOPT="-q -s -m 15 --max-filesize 1000000"
CURLOPT2="--retry 10 --retry-max-time 3600"

case "$1" in
	--boot)
		shift
		CURLOPT2="--retry 3 --retry-max-time 30"
		LMAP_RECONFIG=
	;;
esac

simet_api_lmapputstate() {
	curl $CURLOPT $CURLOPT2 -A "$USERAGENT" --post301 --post302 --post303 \
		-T - -f -L -j -o "$OUTFILE" \
		-H "Authorization: Bearer $OLDAT" \
		"${LMAP_CHANNEL_URL}/v1/agents/$OLDAID/reported-state"
}

simet_lmap_sendstate() {
	$LMAPD -j -s | simet_api_lmapputstate || return $?
	:
}

# FIXME add etag support
simet_api_lmapgetsched() {
	curl $CURLOPT $CURLOPT2 -A "$USERAGENT" \
		-X GET -f -L -j -o "$OUTFILE" \
		-H "Authorization: Bearer $OLDAT" \
		"${LMAP_CHANNEL_URL}/v1/agents/$OLDAID/required-config"
}

simet_lmap_download_schedule() {
	simet_lmap_sendstate || true
	simet_api_lmapgetsched || return $?
	:
}

simet_lmap_reload_config() {
	if [ -n "$LMAP_RECONFIG" ] ; then
		$LMAP_RECONFIG || true
	fi
}

#FIXME - switch to http etag support
gethash() {
	# $1 - file to hash
	[ -r "$1" ] || {
		echo ""
		return 0
	}
	sha256sum "$1" | sed -n '1 { s/[[:blank:]].*// ; p }'
	return 0
}

simet_lmap_verifyconfig() {
	# $* - config files/directories to validate
	CFGS=
	while [ $# -gt 0 ] ; do
		CFGS="$CFGS -c $1"
		shift
	done
	$LMAPCTL -j $CFGS validate || return 1
	return 0
}

activateschedule() {
	NEWSCHED_HASH=$(gethash "$OUTFILE")
	[ x"$NEWSCHED_HASH" != x"$OLDSCHED_HASH" ] && {
		simet_lmap_verifyconfig $LMAP_CONFIG_PATH "$OUTFILE" || {
			logger -s -t simet-lmapd -p daemon.err "illegal schedule received from controller"
			return 1
		}

		chmod 0644 "$OUTFILE" || return 1
		mv -f "$OUTFILE" "$LMAP_SCHEDULE_FILE" || return 1
		simet_lmap_reload_config || return 1
		logger -s -t simet-ma -p daemon.notice "SIMET: schedule has changed"
	}
	:
}

getschedule() {
	# Controller access API requirements:
	#   First, PUT your current state so that controller knows it
	#   Then,  GET your schedule (if PUT failed, you may get one based on ancient state)
	#   Then,  PUT your new state, so that controller knows the schedule took

	# FIXME http etags
	OLDSCHED_HASH=
	[ -r "$LMAP_SCHEDULE_FILE" ] && OLDSCHED_HASH=$(gethash "$LMAP_SCHEDULE_FILE")

	OLDAT=
	OLDAID=
	[ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
	[ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")

	# We *require* an agent-id and agent token to get a schedule
	if [ -z "$OLDAT" ] || [ -z "$OLDAID" ] || [ ! -r "$LMAP_AGENT_FILE" ] ; then
		abend "MA not registered yet, cannot contact controller"
	fi

	# Avoid massive problems on broken config
	if [ -z "$LMAP_SCHEDULE_FILE" ] || [ -z "$LMAP_CHANNEL_URL" ] ; then
		abend "missing essential data in simet-ma.conf, aborting"
	fi

	OUTFILE=$(mktemp -q -t simet-lmap-downloadschedule.$$.XXXXXXXXXX) \
		|| abend "failed to create tmpfile"

	simet_lmap_download_schedule \
		|| abend "failed to download schedule from controller"

	activateschedule \
		|| logger -s -t simet-lmapd -p daemon.err "failed to load/activate new schedule"

	# always try to send state after downloading a schedule
	simet_lmap_sendstate \
		|| abend "failed to send state update to controller"

	rm -f "$OUTFILE"
	OUTFILE=
}

AGENT_TOKEN_LOCK_DIR=$(dirname "$AGENT_TOKEN_LOCK")
[ -d "$AGENT_TOKEN_LOCK_DIR" ] || mkdir -p -m 0755 -- "$AGENT_TOKEN_LOCK_DIR"
[ -r "$AGENT_TOKEN_LOCK" ] || touch "$$AGENT_TOKEN_LOCK"
( flock -n -s 9 && getschedule ) <&- 9< "$AGENT_TOKEN_LOCK"
